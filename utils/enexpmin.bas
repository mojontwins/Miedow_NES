' enexpmin 0.1
' fbc enexpmin.bas cmdlineparser.bas

#include "cmdlineparser.bi"

sub usage
	Print "usage:"
	Print 
	Print "$ enexpmin in=enems.ene out=enems.h prefix=P [nohotspots]"
	Print "           in is the input filename."
	Print "           out is the output filename."
	Print "           prefix will be appended to labels."
	Print
	Print "Will output two bytes per enemy as in TA XY. Check the non existent docs if"
	Print "you need help. Or call Batman."
end sub

Dim As Integer fIn, fOut
Dim As Integer mapW, mapH, nEnems, mapPants
Dim As Integer ctr, i, x, y, t, a
Dim As uByte d
Dim As String mandatory (2) = { "in", "out", "prefix" }
Dim As String dummy
Dim As Integer typeCounters (255)

Print "enexpmin v0.1 ";
sclpParseAttrs
If Not sclpCheck (mandatory ()) Then usage: End

fIn = FreeFile
Open sclpGetValue ("in") For Binary As #fIn
fOut = FreeFile
Open sclpGetValue ("out") For Output As #fOut

dummy = Input (256, fIn)
Get #fIn, , d: mapW = d
Get #fIn, , d: mapH = d
Get #fIn, , d: Get #fIn, , d
Get #fIn, , d: nEnems = d

mapPants = mapW * mapH

Print #fOut, "// " & sclpGetValue ("out") & ", generated by enexpmin v0.1"
Print #fOut, "// Copyleft 2016 by The Mojon Twins"
Print #fOut, ""
Print #fOut, "// MAP_W = " & mapW & ", MAP_H = " & mapH & " NENEMS = " & nEnems
Print #fOut, ""

Print #fOut, "// Format is " & (mapPants) & " x " & nEnems & " x (TA YX)"
Print #fOut, "const unsigned char enems_" & sclpGetValue ("prefix") & " [] = {"

ctr = 0: Print #fOut, "	";
For i = 1 To (mapPants * nEnems)
	Get #fIn, , d: t = d
	Get #fIn, , d: x = d
	Get #fIn, , d: y = d
	
	'' Skip xx, yy
	Get #fIn, , d: Get #fIn, , d

	Get #fIn, , d: a = d

	'' Skip two more unused bytes
	Get #fIn, , d: Get #fIn, , d

	'' And generate code:
	Print #fOut, "0x" & Lcase (Hex ((t Shl 4) Or a, 2)) & ", 0x" & Lcase (Hex ((y Shl 4) Or x, 2));
	If i < (mapPants * nEnems) Then Print #fOut, ", ";
	ctr = (ctr + 1) And 3
	If ctr = 0 And i < (mapPants * nEnems) Then Print #fOut, "": Print #fOut, "	";
Next i
Print #fOut, ""
Print #fOut, "};"

If sclpGetValue ("nohotspots") = "" Then
	Print #fOut, "// Format is " & (mapPants) & " x (T YX)"
	Print #fOut, "const unsigned char hotspots_" & sclpGetValue ("prefix") & " [] = {"
	
	ctr = 0: Print #fOut, "	";
	For i = 1 To mapPants
		Get #fIn, , d: x = d
		Get #fIn, , d: y = d
		Get #fIn, , d: t = d
		
		Print #fOut, "0x" & Hex (t, 2) & ", 0x" & Hex ((y Shl 4) Or x, 2);
		If i < mapPants Then Print #fOut, ", ";
		ctr = (ctr + 1) And 3
		If ctr = 0 And i < mapPants Then Print #fOut, "": Print #fOut, "	";
		typeCounters (t) = typeCounters (t) + 1
	Next i	
	Print #fOut, ""
	Print #fOut, "};"
	Print #fOut, ""

	For i = 0 To 255
		If typeCounters (i) <> 0 then
			Print #fOut, "#define MAX_HOTSPOTS_" & sclpGetValue ("prefix") & "_TYPE_" & i & "	" & typeCounters (i)	
		End If
	Next i
End If

Print "DONE! " & (mapPants * nEnems) & " enems";
If sclpGetValue ("nohotspots") = "" Then Print ", " & mapPants & " hotspots." else Print "."

Close #fOut, #fIn
