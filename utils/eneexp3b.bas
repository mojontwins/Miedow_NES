' ene exporter
' generates minimal contents for usage in small ROMs.

sub usage
	print "$ eneexp3b enems.ene out.h prefix [yadjust] [nohotspots]"
End Sub

Dim As Integer fIn, fOut, ctrr
Dim As uByte d, a, b
Dim As String Dummy, prefix
Dim As Integer mapW, mapH, nEnems, mapPants, nPant, i, j, hl, yadjust, noHotspots
Dim As uByte t, xy1, xy2, mn
Dim As Integer typeCounters (255)
Dim As Integer enTypeCounters (255)
Dim As uByte miniBin (255)
Dim As Integer miniBinIdx
Dim As Integer screenOn (255)
Dim As Integer totalBytes

'' Parse the command line

If Command (3) = "" Then usage: End
prefix = Command (3)

If (Command (4) <> "" And Command (4) <> "nohotspots") Or (Command (4) <> "" And Command (4) <> "nohotspots") Then yadjust = Val (Command (4)) Else yadjust = 0
If Command (4) = "nohotspots" Or Command (5) = "nohotspots" Then noHotspots = -1 Else noHotspots = 0

' Outputs 4 bytes per entry
' T for type
' XY for ini
' XY for end
' MN for properties

' .ENE contains...
' t x1 y1 x2 y2 n s1 s2
' n is speed
' s1, s2 are unused.

fIn = FreeFile
Open Command (1) For Binary As #fIn
fOut = FreeFile
Open Command (2) For Output As #fOut

' Skip header
dummy = Input (256, fIn)
Get #fIn, , d: mapW = d
Get #fIn, , d: mapH = d
Get #fIn, , d: Get #fIn, , d
Get #fIn, , d: nEnems = d

mapPants = mapW * mapH

Print #fOut, "// " & Command (2)
Print #fOut, "// Generated by eneexp3b.exe v0.2 [20160731]"
Print #fOut, "// Copyleft 2016 The Mojon Twins"
Print #fOut, ""
Print #fOut, "// Enems structure is {T YX1 YX2 P} x " & nEnems & " x MAP_W x MAP_H"
Print #fOut, "// y coordinates are adjusted by " & yadjust & " positions"
Print #fOut, "const unsigned char enems_" & prefix & " [] = {"

hl = 0
For i = 1 To (mapPants * nEnems)
	Get #fIn, , t
	Get #fIn, , a: Get #fIn, , b: If t <> 0 Then b = b + yadjust
	xy1 = (b Shl 4) Or (a And 15)
	Get #fIn, , a: Get #fIn, , b: If t <> 0 Then b = b + yadjust
	xy2 = (b Shl 4) Or (a And 15)
	Get #fIn, , mn
	Get #fIn, , d: Get #fIn, , d

	If t Then
		enTypeCounters (t And &HF0) = enTypeCounters (t And &HF0) + 1
	End If

	If hl = 0 Then Print #fOut, "	";
	Print #fOut, "0x" & Hex (t, 2) & ", 0x" & Hex (xy1, 2) & ", 0x" & Hex (xy2, 2) & ", 0x" & Hex (mn, 2);
	If i < (mapPants * nEnems) Then Print #fOut, ", ";
	hl = 1 - hl
	If hl = 0 Then Print #fOut, ""
Next i
Print #fOut, "};"
Print #fOut, ""
For i = 1 To 255
	If enTypeCounters (i) Then Print #fOut, "#define MAX_ENEMS_" & Ucase (prefix) & "_TYPE_" & Ucase (Hex (i, 2)) & "	" & enTypeCounters (i)
next i

Print #fOut, ""
If Not noHotspots Then
	Print #fOut, "// Hotspots structure is {T YX} x MAP_W x MAP_H"
	Print #fOut, "const unsigned char hotspots_" & prefix & " [] = {"
	hl = 0
	For i = 1 To mapPants
		Get #fIn, , xy1
		Get #fIn, , xy2: xy2 = xy2 + yadjust
		xy1 = (xy2 Shl 4) Or (xy1 And 15)
		Get #fIn, , t: If t = 0 Then xy1 = 0: xy2 = 0
		if hl = 0 Then Print #fOut, "	";
		Print #fOut, "0x" & Hex (t, 2) & ", 0x" & Hex (xy1, 2);
		If i < mapPants Then Print #fOut, ", ";
		hl = (hl + 1) And 3
		If hl = 0 Then Print #fOut, ""
		typeCounters (t) = typeCounters (t) + 1
	Next i
	Print #fOut, "};"
	Print #fOut, ""
	
	For i = 0 To 255
		If typeCounters (i) <> 0 then
			' Print #fOut, "// Wrote " & typecounters (i) & " hotspots of type " & i
			Print #fOut, "#define MAX_HOTSPOTS_" & Ucase (prefix) & "_TYPE_" & i & "	" & typeCounters (i)	
		End If
	Next i
End If

Close fIn, fOut